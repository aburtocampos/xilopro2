// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using xilopro2.Data;

#nullable disable

namespace xilopro2.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240623040502_seasontypenull")]
    partial class seasontypenull
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("xilopro2.Data.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("Cityid")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Countryid")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedCategoryIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Stateid")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserTypeofRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("User_Cedula")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("User_CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("User_FNC")
                        .HasColumnType("datetime2");

                    b.Property<string>("User_FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("User_Genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("User_Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nota")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Category", b =>
                {
                    b.Property<int>("Category_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Category_ID"));

                    b.Property<string>("Category_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Category_Status")
                        .HasColumnType("bit");

                    b.HasKey("Category_ID");

                    b.HasIndex("Category_Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.City", b =>
                {
                    b.Property<int>("City_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("City_ID"));

                    b.Property<string>("City_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IdState")
                        .HasColumnType("int");

                    b.HasKey("City_ID");

                    b.HasIndex("IdState", "City_Name")
                        .IsUnique()
                        .HasFilter("[IdState] IS NOT NULL");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.CorrectionAction", b =>
                {
                    b.Property<int>("CorrectionAction_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CorrectionAction_ID"));

                    b.Property<string>("CorrectionAction_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("CorrectionAction_Status")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Jornadasasancionar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("groupId")
                        .HasColumnType("int");

                    b.HasKey("CorrectionAction_ID");

                    b.HasIndex("PlayerId");

                    b.ToTable("CorrectionActions");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Country", b =>
                {
                    b.Property<int>("Country_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Country_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Country_ID"));

                    b.Property<string>("Country_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Country_ID");

                    b.HasIndex("Country_Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.GroupDetail", b =>
                {
                    b.Property<int>("GroupDetail_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupDetail_ID"));

                    b.Property<int>("GoalsAgainst")
                        .HasColumnType("int");

                    b.Property<int>("GoalsFor")
                        .HasColumnType("int");

                    b.Property<int?>("MatchesLost")
                        .HasColumnType("int");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("int");

                    b.Property<int?>("MatchesTied")
                        .HasColumnType("int");

                    b.Property<int?>("MatchesWon")
                        .HasColumnType("int");

                    b.Property<int>("groupId")
                        .HasColumnType("int");

                    b.Property<int>("teamId")
                        .HasColumnType("int");

                    b.HasKey("GroupDetail_ID");

                    b.HasIndex("teamId");

                    b.HasIndex("groupId", "teamId")
                        .IsUnique();

                    b.ToTable("GroupDetails");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Groups", b =>
                {
                    b.Property<int>("Group_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Group_ID"));

                    b.Property<string>("Group_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Group_Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("torneoId")
                        .HasColumnType("int");

                    b.HasKey("Group_ID");

                    b.HasIndex("torneoId", "Group_Name")
                        .IsUnique();

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Lineup", b =>
                {
                    b.Property<int>("Lineup_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Lineup_ID"));

                    b.Property<int>("EntraPor")
                        .HasColumnType("int");

                    b.Property<bool>("Lineup_IsTitular")
                        .HasColumnType("bit");

                    b.Property<int>("MinEntra")
                        .HasColumnType("int");

                    b.Property<int>("MinSale")
                        .HasColumnType("int");

                    b.Property<int?>("Player_ID")
                        .HasColumnType("int");

                    b.Property<int>("Salepor")
                        .HasColumnType("int");

                    b.HasKey("Lineup_ID");

                    b.HasIndex("Player_ID");

                    b.ToTable("Lineups");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Matchgame", b =>
                {
                    b.Property<int>("Match_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Match_ID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoalsLocal")
                        .HasColumnType("int");

                    b.Property<int>("GoalsVisitor")
                        .HasColumnType("int");

                    b.Property<int>("GroupsrId")
                        .HasColumnType("int");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<string>("Jornada")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TeamLocalId")
                        .HasColumnType("int");

                    b.Property<int>("TeamVisitorId")
                        .HasColumnType("int");

                    b.Property<int>("torneoid")
                        .HasColumnType("int");

                    b.HasKey("Match_ID");

                    b.HasIndex("GroupsrId");

                    b.HasIndex("TeamLocalId", "TeamVisitorId", "GroupsrId")
                        .IsUnique();

                    b.HasIndex("TeamLocalId", "TeamVisitorId", "Jornada", "GroupsrId")
                        .IsUnique();

                    b.HasIndex("TeamVisitorId", "TeamLocalId", "Jornada", "GroupsrId")
                        .IsUnique();

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Membership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MemberFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MemberLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MembershipType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Membership_FullName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Membership_FullName")
                        .IsUnique()
                        .HasFilter("[Membership_FullName] IS NOT NULL");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Parent", b =>
                {
                    b.Property<int>("Parent_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Parent_ID"));

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("Parent_Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Parent_Cedula")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Parent_FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Parent_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parent_ImageCedula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parent_LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("StateID")
                        .HasColumnType("int");

                    b.HasKey("Parent_ID");

                    b.HasIndex("PlayerId");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Payments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MembershipId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Player", b =>
                {
                    b.Property<int>("Player_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Player_ID"));

                    b.Property<int>("Cityid")
                        .HasColumnType("int");

                    b.Property<int>("Countryid")
                        .HasColumnType("int");

                    b.Property<string>("Player_Address")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Player_Cedula")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<int>("Player_Dorsal")
                        .HasColumnType("int");

                    b.Property<string>("Player_Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Player_FNC")
                        .HasColumnType("datetime2");

                    b.Property<string>("Player_FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Player_Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Player_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Player_LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Player_PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool>("Player_Status")
                        .HasColumnType("bit");

                    b.Property<string>("Player_fifaid")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("Positionid")
                        .HasColumnType("int");

                    b.Property<string>("SelectedCategoryIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Stateid")
                        .HasColumnType("int");

                    b.Property<int>("Teamid")
                        .HasColumnType("int");

                    b.Property<string>("season")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("torneoid")
                        .HasColumnType("int");

                    b.HasKey("Player_ID");

                    b.HasIndex("Countryid");

                    b.HasIndex("Positionid");

                    b.HasIndex("Teamid");

                    b.HasIndex("torneoid");

                    b.HasIndex("SelectedCategoryIds", "Player_Dorsal", "Teamid")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.PlayerFiles", b =>
                {
                    b.Property<int>("PlayerFiles_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerFiles_ID"));

                    b.Property<string>("PlayerFiles_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerFiles_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("PlayerFiles_ID");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerFiles");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.PlayerStatistics", b =>
                {
                    b.Property<int>("PlayerStatistic_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerStatistic_ID"));

                    b.Property<int>("CornerKicks")
                        .HasColumnType("int");

                    b.Property<int>("DetailsGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Fouls")
                        .HasColumnType("int");

                    b.Property<int>("GoalkeeperSaves")
                        .HasColumnType("int");

                    b.Property<int>("Goals")
                        .HasColumnType("int");

                    b.Property<int>("GoalsConceded")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchgameMatch_ID")
                        .HasColumnType("int");

                    b.Property<int>("Penalties")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("RedCards")
                        .HasColumnType("int");

                    b.Property<int>("TorneoId")
                        .HasColumnType("int");

                    b.Property<int>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("PlayerStatistic_ID");

                    b.HasIndex("MatchgameMatch_ID");

                    b.HasIndex("PlayerId");

                    b.HasIndex("MatchId", "PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerStatistics");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Position", b =>
                {
                    b.Property<int>("Position_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Position_ID"));

                    b.Property<string>("Position_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Position_Status")
                        .HasColumnType("bit");

                    b.HasKey("Position_ID");

                    b.HasIndex("Position_Name")
                        .IsUnique();

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.State", b =>
                {
                    b.Property<int>("State_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("State_ID"));

                    b.Property<int?>("CountryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("State_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("State_ID");

                    b.HasIndex("CountryId", "State_Name")
                        .IsUnique();

                    b.ToTable("States");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Team", b =>
                {
                    b.Property<int>("Team_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Team_ID"));

                    b.Property<string>("Team_Estadio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Team_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Team_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Team_ID");

                    b.HasIndex("Team_Name")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Torneo", b =>
                {
                    b.Property<int>("Torneo_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Torneo_ID"));

                    b.Property<string>("SelectedCategoryIds")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Torneo_EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Torneo_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Torneo_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Torneo_Season")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Torneo_SeasonType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Torneo_StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Torneo_Status")
                        .HasColumnType("bit");

                    b.HasKey("Torneo_ID");

                    b.HasIndex("Torneo_Name", "SelectedCategoryIds", "Torneo_Season")
                        .IsUnique();

                    b.ToTable("Torneos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("xilopro2.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("xilopro2.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xilopro2.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("xilopro2.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Attendance", b =>
                {
                    b.HasOne("xilopro2.Data.Entities.Player", "Player")
                        .WithMany("Attendances")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.City", b =>
                {
                    b.HasOne("xilopro2.Data.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("IdState");

                    b.Navigation("State");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.CorrectionAction", b =>
                {
                    b.HasOne("xilopro2.Data.Entities.Player", "Player")
                        .WithMany("CorrectionActions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.GroupDetail", b =>
                {
                    b.HasOne("xilopro2.Data.Entities.Groups", "Groups")
                        .WithMany("GroupDetails")
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xilopro2.Data.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("teamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Groups");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Groups", b =>
                {
                    b.HasOne("xilopro2.Data.Entities.Torneo", "Torneo")
                        .WithMany("Groups")
                        .HasForeignKey("torneoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Torneo");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Lineup", b =>
                {
                    b.HasOne("xilopro2.Data.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("Player_ID");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Matchgame", b =>
                {
                    b.HasOne("xilopro2.Data.Entities.Groups", "Groups")
                        .WithMany("Matches")
                        .HasForeignKey("GroupsrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xilopro2.Data.Entities.Team", "TeamLocal")
                        .WithMany()
                        .HasForeignKey("TeamLocalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("xilopro2.Data.Entities.Team", "TeamVisitor")
                        .WithMany()
                        .HasForeignKey("TeamVisitorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Groups");

                    b.Navigation("TeamLocal");

                    b.Navigation("TeamVisitor");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Parent", b =>
                {
                    b.HasOne("xilopro2.Data.Entities.Player", "Player")
                        .WithMany("Parents")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Payments", b =>
                {
                    b.HasOne("xilopro2.Data.Entities.Membership", "Membership")
                        .WithMany("Payments")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Player", b =>
                {
                    b.HasOne("xilopro2.Data.Entities.Country", "Country")
                        .WithMany("Players")
                        .HasForeignKey("Countryid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("xilopro2.Data.Entities.Position", "Position")
                        .WithMany("Players")
                        .HasForeignKey("Positionid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("xilopro2.Data.Entities.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("Teamid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("xilopro2.Data.Entities.Torneo", null)
                        .WithMany("Players")
                        .HasForeignKey("torneoid");

                    b.Navigation("Country");

                    b.Navigation("Position");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.PlayerFiles", b =>
                {
                    b.HasOne("xilopro2.Data.Entities.Player", "Player")
                        .WithMany("PlayerFiles")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.PlayerStatistics", b =>
                {
                    b.HasOne("xilopro2.Data.Entities.Matchgame", "Matchgame")
                        .WithMany("PlayerStatistics")
                        .HasForeignKey("MatchgameMatch_ID");

                    b.HasOne("xilopro2.Data.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matchgame");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.State", b =>
                {
                    b.HasOne("xilopro2.Data.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Country", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("States");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Groups", b =>
                {
                    b.Navigation("GroupDetails");

                    b.Navigation("Matches");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Matchgame", b =>
                {
                    b.Navigation("PlayerStatistics");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Membership", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Player", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("CorrectionActions");

                    b.Navigation("Parents");

                    b.Navigation("PlayerFiles");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Position", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Team", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("xilopro2.Data.Entities.Torneo", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
