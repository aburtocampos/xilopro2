@model xilopro2.Models.CorrectActionViewModel
@{
    var path2 = "/Content/Players/";
}

<div asp-validation-summary="ModelOnly" class="alert alert-danger alert-dismissible fade show"></div>
<input type="hidden" asp-for="CorrectionAction_ID" />
<input type="hidden" asp-for="PlayerId" />
<input type="hidden" asp-for="PlayerName" />
<input type="hidden" asp-for="Player" />
<input type="hidden" asp-for="groupId" id="inputhiddengid" />
<input type="hidden" asp-for="groupIdes" id="groupIdes" />


<div class="col-md-4">
    <div class="form-group">
        <label class="control-label fw-bold">Tipo de Sanción:</label>
        <div class=" mb-2 d-flex align-items-center">
            <select id="tipo_select" class="form-select" asp-for="CorrectionAction_Name">
                <option value="0" selected >Seleccione un tipo</option>
                <option value="VERBAL" >VERBAL</option>
                <option value="ESCRITO" >ESCRITO</option>
                <option value="TERMINACION" >TERMINACION</option>
                <option value="DEPORTIVO">DEPORTIVO</option>
            </select>
        </div>
        <span asp-validation-for="CorrectionAction_Name" class="text-danger"></span>
    </div>
    <div class="form-group mb-2">
        <label asp-for="Fecha" class="control-label fw-bold"></label>
        <input asp-for="Fecha" class="form-control"  />
        <span asp-validation-for="Fecha" class="text-danger"></span>
    </div>


    <div class="form-check p-0">
        <label asp-for="CorrectionAction_Status" class="d-block mb-1 fw-bold">Estado de la Sanción:</label>
        <input asp-for="CorrectionAction_Status" checked type="checkbox" id="chckStaus" data-group-cls="btn-group-sm" data-off-active-cls="btn-danger" data-on-active-cls="btn-success" data-off-cls="btn-outline-danger" data-on-cls="btn-outline-success" data-off-title="Inactiva" data-on-title="Activa" />
        <span asp-validation-for="CorrectionAction_Status" class="text-danger"></span>
    </div>

</div>


<div class="col">
    <div class="form-group mb-2">
        <label asp-for="Description" class="control-label fw-bold"></label>
        <textarea class="form-control" asp-for="Description" cols="20" id="Description" name="Description" rows="6" placeholder="Describa situación..."></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>
</div>
<div class="mb-3" id="selectsJornadas">

    <div class="form-group my-3">
        <label asp-for="Jornadasasancionar" class="control-label fw-bold mb-2"></label>
        <!--<select asp-for="Categoryid" asp-items="Model.Categories" class="form-select"></select>-->
        @if (Model.Matche.Count() > 0)
        {
            @foreach (var group in Model.Matche)
            {
                <div class="group" data-groupid="@group.GroupId">
                    <span>
                        Fase / Grupo: <span class="badge text-bg-secondary">@group.GroupName</span><i class="fa-solid fa-arrow-right ms-2"></i>
                    </span>
                    <!-- El nombre del grupo, por ejemplo, la liga -->
                    @foreach (var mat in group.Matches)
                    {
                        <div class="form-check form-switch ms-4 d-inline-block">
                            <input class="form-check-input jornada-checkbox" type="checkbox" role="switch" id="flexSwitchCheckDefault_@mat.MatchID" name="Jornadasasancionar" value="@mat.MatchID"
                            @(Model.Jornadasasancionar != null && Model.Jornadasasancionar.Contains(mat.MatchID.ToString()) ? "checked" : "") style="cursor:pointer;" onchange="updateHiddenInput('@mat.Jornada', this.checked,@group.GroupId)">
                            <label class="form-check-label ms-1" for="flexSwitchCheckDefault_@mat.MatchID">@mat.Jornada</label>
                            <input type="hidden" name="GroupNames" value="@group.GroupName" />
                        </div>
                    }
                </div>
            }
        }
        else
        {
            <div class="alert alert-warning p-1" role="alert">
                <i class="fa-solid fa-triangle-exclamation fa-lg me-2"></i> Aun no se han creado partidos en este Torneo
            </div>
        }
       
        <span asp-validation-for="Jornadasasancionar" class="text-danger"></span>
    </div>

</div>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="https://unpkg.com/bootstrap-checkbox@2.0.0/dist/js/bootstrap-checkbox.js"></script>
<script type="text/javascript">

    $('#chckStaus').checkboxpicker({
        html: true,
        offLabel: '<i class="fa-regular fa-thumbs-down"/> Inactivo',
        onLabel: '<i class="fa-regular fa-thumbs-up"/> Activo'
    });

    document.addEventListener('DOMContentLoaded', function () {
        var groupCheckboxes = document.querySelectorAll('.jornada-checkbox');
        groupCheckboxes.forEach(function (checkbox) {
            if (checkbox.checked) {
                var groupId = checkbox.closest('.group').getAttribute('data-groupid');
                updateGroupIdes(groupId);
            }
        });
    });



        // Función para verificar y mostrar/ocultar según la opción seleccionada inicialmente
        function toggleSelectsJornadas(selectedOption) {
            var elementToHide = $('#selectsJornadas');

            if (selectedOption === 'DEPORTIVO') {
                elementToHide.show();
            } else {
                elementToHide.hide();
            }
        }

        // Al cargar la página, verificar la opción seleccionada inicialmente

    var hiddenInput = document.getElementById('inputhiddengid');
    console.log("al cargar", hiddenInput.value)

        var selectedOption = $('#tipo_select').val();
        toggleSelectsJornadas(selectedOption);

        // Evento change en el select
        $('#tipo_select').change(function () {
            var selectedOption = $(this).val();
            toggleSelectsJornadas(selectedOption);
        });

        // Al cargar la página, verificar la opción seleccionada inicialmente
        function updateHiddenInput(matValue, isChecked, groupId) {
            console.log("matValue:", matValue, isChecked, groupId);
            var hiddenInput = document.getElementById('inputhiddengid');
            var groupIdesInput = document.getElementById('groupIdes');
            var anyCheckboxChecked = false;

            // Check if at least one checkbox is checked
            var checkboxes = document.querySelectorAll('.jornada-checkbox');
            checkboxes.forEach(function (checkbox) {
                if (checkbox.checked) {
                    anyCheckboxChecked = true;
                    return; // Exit forEach early if we found a checked checkbox
                }
            });

            if (anyCheckboxChecked) {
                // Keep the original value in hiddenInput
                hiddenInput.value = hiddenInput.defaultValue;
            } else {
                // Set hiddenInput value based on current checkbox state
                if (isChecked) {
                    hiddenInput.value = matValue;
                } else {
                    hiddenInput.value = '';
                }
            }

            // Update the groupIdes input
            updateGroupIdes(groupId, isChecked);
            console.log("Current value:", hiddenInput.value);
        }
     





    function updateGroupIdes(groupId) {
        var groupIdesInput = document.getElementById('groupIdes');

        var groupIdes = [];

        // Verificar si groupIdesInput.value no está vacío
        if (groupIdesInput.value.trim() !== '') {
            groupIdes = groupIdesInput.value.split(',')
                .map(function (item) {
                    var intValue = parseInt(item.trim(), 10); // Convertir cada elemento a entero
                    return isNaN(intValue) ? null : intValue; // Manejar NaN y valores no numéricos
                })
                .filter(function (item) {
                    return item !== null; // Filtrar elementos que no son números válidos
                });
        }

        // Check if at least one checkbox is checked in the group
        var groupCheckboxes = document.querySelectorAll('.group[data-groupid="' + groupId + '"] .jornada-checkbox');
        var anyCheckboxCheckedInGroup = Array.from(groupCheckboxes).some(function (checkbox) {
            return checkbox.checked;
        });

        if (anyCheckboxCheckedInGroup) {
            // Agregar el groupId si no está presente en groupIdes
            if (!groupIdes.includes(groupId)) {
                groupIdes.push(groupId);
            }
        } else {
            // Filtrar groupIdes para eliminar el groupId actual si ya está presente
            groupIdes = groupIdes.filter(function (id) {
                return id !== groupId;
            });
        }

        // Actualizar el valor del campo oculto groupIdes
        groupIdesInput.value = groupIdes.join(',');

        console.log("Updated groupIdes:", groupIdesInput.value);

        // Realizar la solicitud AJAX para enviar groupIdes al servidor
        $.ajax({
            url: '/Players/AsignarGroupIdes', // URL de la acción en tu controlador
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(groupIdes), // Convertir groupIdes a JSON para enviarlo al servidor
            success: function (response) {
                console.log("Datos enviados correctamente al servidor");
                // Manejar la respuesta del servidor si es necesario
            },
            error: function (xhr, status, error) {
                console.error("Error al enviar datos al servidor:", error);
                // Manejar errores de la solicitud AJAX si es necesario
            }
        });

    }

</script>
